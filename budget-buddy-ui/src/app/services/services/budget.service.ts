/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateBudget } from '../fn/budget/add-or-update-budget';
import { AddOrUpdateBudget$Params } from '../fn/budget/add-or-update-budget';
import { BudgetResponse } from '../models/budget-response';
import { calculateMonthlyBudget } from '../fn/budget/calculate-monthly-budget';
import { CalculateMonthlyBudget$Params } from '../fn/budget/calculate-monthly-budget';
import { deleteBudget1 } from '../fn/budget/delete-budget-1';
import { DeleteBudget1$Params } from '../fn/budget/delete-budget-1';
import { findAllBudgetsByOwner } from '../fn/budget/find-all-budgets-by-owner';
import { FindAllBudgetsByOwner$Params } from '../fn/budget/find-all-budgets-by-owner';
import { findBudgetById } from '../fn/budget/find-budget-by-id';
import { FindBudgetById$Params } from '../fn/budget/find-budget-by-id';
import { PageResponseBudgetResponse } from '../models/page-response-budget-response';

@Injectable({ providedIn: 'root' })
export class BudgetService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addOrUpdateBudget()` */
  static readonly AddOrUpdateBudgetPath = '/budget/add-budget';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateBudget()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateBudget$Response(params: AddOrUpdateBudget$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addOrUpdateBudget(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateBudget$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateBudget(params: AddOrUpdateBudget$Params, context?: HttpContext): Observable<number> {
    return this.addOrUpdateBudget$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findBudgetById()` */
  static readonly FindBudgetByIdPath = '/budget/{budget-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findBudgetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBudgetById$Response(params: FindBudgetById$Params, context?: HttpContext): Observable<StrictHttpResponse<BudgetResponse>> {
    return findBudgetById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findBudgetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findBudgetById(params: FindBudgetById$Params, context?: HttpContext): Observable<BudgetResponse> {
    return this.findBudgetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<BudgetResponse>): BudgetResponse => r.body)
    );
  }

  /** Path part for operation `deleteBudget1()` */
  static readonly DeleteBudget1Path = '/budget/{budget-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBudget1()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBudget1$Response(params: DeleteBudget1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteBudget1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBudget1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBudget1(params: DeleteBudget1$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteBudget1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `calculateMonthlyBudget()` */
  static readonly CalculateMonthlyBudgetPath = '/budget/monthly-budget';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `calculateMonthlyBudget()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateMonthlyBudget$Response(params?: CalculateMonthlyBudget$Params, context?: HttpContext): Observable<StrictHttpResponse<BudgetResponse>> {
    return calculateMonthlyBudget(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `calculateMonthlyBudget$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  calculateMonthlyBudget(params?: CalculateMonthlyBudget$Params, context?: HttpContext): Observable<BudgetResponse> {
    return this.calculateMonthlyBudget$Response(params, context).pipe(
      map((r: StrictHttpResponse<BudgetResponse>): BudgetResponse => r.body)
    );
  }

  /** Path part for operation `findAllBudgetsByOwner()` */
  static readonly FindAllBudgetsByOwnerPath = '/budget/all-budgets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBudgetsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBudgetsByOwner$Response(params?: FindAllBudgetsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBudgetResponse>> {
    return findAllBudgetsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBudgetsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBudgetsByOwner(params?: FindAllBudgetsByOwner$Params, context?: HttpContext): Observable<PageResponseBudgetResponse> {
    return this.findAllBudgetsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBudgetResponse>): PageResponseBudgetResponse => r.body)
    );
  }

}
