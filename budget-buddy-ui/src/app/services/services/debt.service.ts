/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateDebt } from '../fn/debt/add-or-update-debt';
import { AddOrUpdateDebt$Params } from '../fn/debt/add-or-update-debt';
import { DebtResponse } from '../models/debt-response';
import { deleteDebt } from '../fn/debt/delete-debt';
import { DeleteDebt$Params } from '../fn/debt/delete-debt';
import { findAllDebtsByOwner } from '../fn/debt/find-all-debts-by-owner';
import { FindAllDebtsByOwner$Params } from '../fn/debt/find-all-debts-by-owner';
import { findAllNonPaidDebtsByOwner } from '../fn/debt/find-all-non-paid-debts-by-owner';
import { FindAllNonPaidDebtsByOwner$Params } from '../fn/debt/find-all-non-paid-debts-by-owner';
import { findDebtById } from '../fn/debt/find-debt-by-id';
import { FindDebtById$Params } from '../fn/debt/find-debt-by-id';
import { getTotalAmountDebtByUser } from '../fn/debt/get-total-amount-debt-by-user';
import { GetTotalAmountDebtByUser$Params } from '../fn/debt/get-total-amount-debt-by-user';
import { PageResponseDebtResponse } from '../models/page-response-debt-response';

@Injectable({ providedIn: 'root' })
export class DebtService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addOrUpdateDebt()` */
  static readonly AddOrUpdateDebtPath = '/debt/add-debt';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateDebt()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateDebt$Response(params: AddOrUpdateDebt$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addOrUpdateDebt(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateDebt$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateDebt(params: AddOrUpdateDebt$Params, context?: HttpContext): Observable<number> {
    return this.addOrUpdateDebt$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findDebtById()` */
  static readonly FindDebtByIdPath = '/debt/{debt-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findDebtById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findDebtById$Response(params: FindDebtById$Params, context?: HttpContext): Observable<StrictHttpResponse<DebtResponse>> {
    return findDebtById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findDebtById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findDebtById(params: FindDebtById$Params, context?: HttpContext): Observable<DebtResponse> {
    return this.findDebtById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DebtResponse>): DebtResponse => r.body)
    );
  }

  /** Path part for operation `deleteDebt()` */
  static readonly DeleteDebtPath = '/debt/{debt-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDebt()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDebt$Response(params: DeleteDebt$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteDebt(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDebt$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDebt(params: DeleteDebt$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteDebt$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTotalAmountDebtByUser()` */
  static readonly GetTotalAmountDebtByUserPath = '/debt/total-amount';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalAmountDebtByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalAmountDebtByUser$Response(params?: GetTotalAmountDebtByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalAmountDebtByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalAmountDebtByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalAmountDebtByUser(params?: GetTotalAmountDebtByUser$Params, context?: HttpContext): Observable<number> {
    return this.getTotalAmountDebtByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllNonPaidDebtsByOwner()` */
  static readonly FindAllNonPaidDebtsByOwnerPath = '/debt/debts-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllNonPaidDebtsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllNonPaidDebtsByOwner$Response(params: FindAllNonPaidDebtsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDebtResponse>> {
    return findAllNonPaidDebtsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllNonPaidDebtsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllNonPaidDebtsByOwner(params: FindAllNonPaidDebtsByOwner$Params, context?: HttpContext): Observable<PageResponseDebtResponse> {
    return this.findAllNonPaidDebtsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDebtResponse>): PageResponseDebtResponse => r.body)
    );
  }

  /** Path part for operation `findAllDebtsByOwner()` */
  static readonly FindAllDebtsByOwnerPath = '/debt/all-debts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllDebtsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDebtsByOwner$Response(params?: FindAllDebtsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDebtResponse>> {
    return findAllDebtsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllDebtsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDebtsByOwner(params?: FindAllDebtsByOwner$Params, context?: HttpContext): Observable<PageResponseDebtResponse> {
    return this.findAllDebtsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDebtResponse>): PageResponseDebtResponse => r.body)
    );
  }

}
