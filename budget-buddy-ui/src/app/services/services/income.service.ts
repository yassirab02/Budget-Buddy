/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateIncome } from '../fn/income/add-or-update-income';
import { AddOrUpdateIncome$Params } from '../fn/income/add-or-update-income';
import { deleteIncome } from '../fn/income/delete-income';
import { DeleteIncome$Params } from '../fn/income/delete-income';
import { findAllIncomes } from '../fn/income/find-all-incomes';
import { FindAllIncomes$Params } from '../fn/income/find-all-incomes';
import { findIncomeById } from '../fn/income/find-income-by-id';
import { FindIncomeById$Params } from '../fn/income/find-income-by-id';
import { IncomeResponse } from '../models/income-response';
import { PageResponseIncomeResponse } from '../models/page-response-income-response';

@Injectable({ providedIn: 'root' })
export class IncomeService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addOrUpdateIncome()` */
  static readonly AddOrUpdateIncomePath = '/income/add-income';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateIncome()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateIncome$Response(params: AddOrUpdateIncome$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addOrUpdateIncome(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateIncome$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateIncome(params: AddOrUpdateIncome$Params, context?: HttpContext): Observable<number> {
    return this.addOrUpdateIncome$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findIncomeById()` */
  static readonly FindIncomeByIdPath = '/income/{income-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findIncomeById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findIncomeById$Response(params: FindIncomeById$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeResponse>> {
    return findIncomeById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findIncomeById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findIncomeById(params: FindIncomeById$Params, context?: HttpContext): Observable<IncomeResponse> {
    return this.findIncomeById$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeResponse>): IncomeResponse => r.body)
    );
  }

  /** Path part for operation `deleteIncome()` */
  static readonly DeleteIncomePath = '/income/{income-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteIncome()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncome$Response(params: DeleteIncome$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteIncome(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteIncome$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncome(params: DeleteIncome$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteIncome$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAllIncomes()` */
  static readonly FindAllIncomesPath = '/income/all-incomes';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllIncomes()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllIncomes$Response(params?: FindAllIncomes$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseIncomeResponse>> {
    return findAllIncomes(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllIncomes$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllIncomes(params?: FindAllIncomes$Params, context?: HttpContext): Observable<PageResponseIncomeResponse> {
    return this.findAllIncomes$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseIncomeResponse>): PageResponseIncomeResponse => r.body)
    );
  }

}
