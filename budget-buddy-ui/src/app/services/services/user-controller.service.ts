/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBalance } from '../fn/user-controller/add-balance';
import { AddBalance$Params } from '../fn/user-controller/add-balance';
import { changePassword } from '../fn/user-controller/change-password';
import { ChangePassword$Params } from '../fn/user-controller/change-password';
import { getCurrentUser } from '../fn/user-controller/get-current-user';
import { GetCurrentUser$Params } from '../fn/user-controller/get-current-user';
import { getUsersTransfer } from '../fn/user-controller/get-users-transfer';
import { GetUsersTransfer$Params } from '../fn/user-controller/get-users-transfer';
import { UserResponse } from '../models/user-response';
import { UserTransferResponse } from '../models/user-transfer-response';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addBalance()` */
  static readonly AddBalancePath = '/api/v1/user/add-balance/{amount}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBalance()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBalance$Response(params: AddBalance$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addBalance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBalance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addBalance(params: AddBalance$Params, context?: HttpContext): Observable<{
}> {
    return this.addBalance$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `changePassword()` */
  static readonly ChangePasswordPath = '/api/v1/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword$Response(params: ChangePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return changePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword(params: ChangePassword$Params, context?: HttpContext): Observable<{
}> {
    return this.changePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getUsersTransfer()` */
  static readonly GetUsersTransferPath = '/api/v1/user/users-transfer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersTransfer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersTransfer$Response(params?: GetUsersTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserTransferResponse>>> {
    return getUsersTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersTransfer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersTransfer(params?: GetUsersTransfer$Params, context?: HttpContext): Observable<Array<UserTransferResponse>> {
    return this.getUsersTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserTransferResponse>>): Array<UserTransferResponse> => r.body)
    );
  }

  /** Path part for operation `getCurrentUser()` */
  static readonly GetCurrentUserPath = '/api/v1/user/current-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser$Response(params?: GetCurrentUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getCurrentUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUser(params?: GetCurrentUser$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getCurrentUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

}
