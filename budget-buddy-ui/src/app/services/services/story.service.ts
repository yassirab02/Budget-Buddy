/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateStory } from '../fn/story/add-or-update-story';
import { AddOrUpdateStory$Params } from '../fn/story/add-or-update-story';
import { deleteStory } from '../fn/story/delete-story';
import { DeleteStory$Params } from '../fn/story/delete-story';
import { findAllDisplayableStories } from '../fn/story/find-all-displayable-stories';
import { FindAllDisplayableStories$Params } from '../fn/story/find-all-displayable-stories';
import { findAllStoriesByOwner } from '../fn/story/find-all-stories-by-owner';
import { FindAllStoriesByOwner$Params } from '../fn/story/find-all-stories-by-owner';
import { findStoryById } from '../fn/story/find-story-by-id';
import { FindStoryById$Params } from '../fn/story/find-story-by-id';
import { hideStory } from '../fn/story/hide-story';
import { HideStory$Params } from '../fn/story/hide-story';
import { PageResponseStoryResponse } from '../models/page-response-story-response';
import { StoryResponse } from '../models/story-response';
import { toggle } from '../fn/story/toggle';
import { Toggle$Params } from '../fn/story/toggle';

@Injectable({ providedIn: 'root' })
export class StoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `toggle()` */
  static readonly TogglePath = '/story/toggle/{story-id}/reaction/{reactionType}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggle()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggle$Response(params: Toggle$Params, context?: HttpContext): Observable<StrictHttpResponse<StoryResponse>> {
    return toggle(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggle$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggle(params: Toggle$Params, context?: HttpContext): Observable<StoryResponse> {
    return this.toggle$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoryResponse>): StoryResponse => r.body)
    );
  }

  /** Path part for operation `hideStory()` */
  static readonly HideStoryPath = '/story/hide/{story-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `hideStory()` instead.
   *
   * This method doesn't expect any request body.
   */
  hideStory$Response(params: HideStory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return hideStory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `hideStory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  hideStory(params: HideStory$Params, context?: HttpContext): Observable<{
}> {
    return this.hideStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `addOrUpdateStory()` */
  static readonly AddOrUpdateStoryPath = '/story/add-story';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateStory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateStory$Response(params: AddOrUpdateStory$Params, context?: HttpContext): Observable<StrictHttpResponse<StoryResponse>> {
    return addOrUpdateStory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateStory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateStory(params: AddOrUpdateStory$Params, context?: HttpContext): Observable<StoryResponse> {
    return this.addOrUpdateStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoryResponse>): StoryResponse => r.body)
    );
  }

  /** Path part for operation `findAllDisplayableStories()` */
  static readonly FindAllDisplayableStoriesPath = '/story';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllDisplayableStories()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableStories$Response(params?: FindAllDisplayableStories$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseStoryResponse>> {
    return findAllDisplayableStories(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllDisplayableStories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableStories(params?: FindAllDisplayableStories$Params, context?: HttpContext): Observable<PageResponseStoryResponse> {
    return this.findAllDisplayableStories$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseStoryResponse>): PageResponseStoryResponse => r.body)
    );
  }

  /** Path part for operation `findStoryById()` */
  static readonly FindStoryByIdPath = '/story/{story-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findStoryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStoryById$Response(params: FindStoryById$Params, context?: HttpContext): Observable<StrictHttpResponse<StoryResponse>> {
    return findStoryById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findStoryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findStoryById(params: FindStoryById$Params, context?: HttpContext): Observable<StoryResponse> {
    return this.findStoryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StoryResponse>): StoryResponse => r.body)
    );
  }

  /** Path part for operation `deleteStory()` */
  static readonly DeleteStoryPath = '/story/{story-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteStory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStory$Response(params: DeleteStory$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteStory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteStory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteStory(params: DeleteStory$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAllStoriesByOwner()` */
  static readonly FindAllStoriesByOwnerPath = '/story/all-stories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllStoriesByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStoriesByOwner$Response(params?: FindAllStoriesByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseStoryResponse>> {
    return findAllStoriesByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllStoriesByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStoriesByOwner(params?: FindAllStoriesByOwner$Params, context?: HttpContext): Observable<PageResponseStoryResponse> {
    return this.findAllStoriesByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseStoryResponse>): PageResponseStoryResponse => r.body)
    );
  }

}
