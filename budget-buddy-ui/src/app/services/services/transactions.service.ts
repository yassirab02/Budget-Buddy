/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllTransactionsByReciever } from '../fn/transactions/find-all-transactions-by-reciever';
import { FindAllTransactionsByReciever$Params } from '../fn/transactions/find-all-transactions-by-reciever';
import { findAllTransactionsBySender } from '../fn/transactions/find-all-transactions-by-sender';
import { FindAllTransactionsBySender$Params } from '../fn/transactions/find-all-transactions-by-sender';
import { PageResponseTransactionResponse } from '../models/page-response-transaction-response';
import { transferMoneyToGoal } from '../fn/transactions/transfer-money-to-goal';
import { TransferMoneyToGoal$Params } from '../fn/transactions/transfer-money-to-goal';
import { transferMoneyToUser } from '../fn/transactions/transfer-money-to-user';
import { TransferMoneyToUser$Params } from '../fn/transactions/transfer-money-to-user';
import { transferMoneyToWallet } from '../fn/transactions/transfer-money-to-wallet';
import { TransferMoneyToWallet$Params } from '../fn/transactions/transfer-money-to-wallet';

@Injectable({ providedIn: 'root' })
export class TransactionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `transferMoneyToWallet()` */
  static readonly TransferMoneyToWalletPath = '/transactions/to-wallet';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `transferMoneyToWallet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToWallet$Response(params: TransferMoneyToWallet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return transferMoneyToWallet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `transferMoneyToWallet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToWallet(params: TransferMoneyToWallet$Params, context?: HttpContext): Observable<number> {
    return this.transferMoneyToWallet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `transferMoneyToUser()` */
  static readonly TransferMoneyToUserPath = '/transactions/to-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `transferMoneyToUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToUser$Response(params: TransferMoneyToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return transferMoneyToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `transferMoneyToUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToUser(params: TransferMoneyToUser$Params, context?: HttpContext): Observable<number> {
    return this.transferMoneyToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `transferMoneyToGoal()` */
  static readonly TransferMoneyToGoalPath = '/transactions/to-goal';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `transferMoneyToGoal()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToGoal$Response(params: TransferMoneyToGoal$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return transferMoneyToGoal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `transferMoneyToGoal$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transferMoneyToGoal(params: TransferMoneyToGoal$Params, context?: HttpContext): Observable<number> {
    return this.transferMoneyToGoal$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllTransactionsBySender()` */
  static readonly FindAllTransactionsBySenderPath = '/transactions/all-transactions-sent';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTransactionsBySender()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsBySender$Response(params?: FindAllTransactionsBySender$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTransactionResponse>> {
    return findAllTransactionsBySender(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTransactionsBySender$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsBySender(params?: FindAllTransactionsBySender$Params, context?: HttpContext): Observable<PageResponseTransactionResponse> {
    return this.findAllTransactionsBySender$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTransactionResponse>): PageResponseTransactionResponse => r.body)
    );
  }

  /** Path part for operation `findAllTransactionsByReciever()` */
  static readonly FindAllTransactionsByRecieverPath = '/transactions/all-transactions-received';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTransactionsByReciever()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsByReciever$Response(params?: FindAllTransactionsByReciever$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTransactionResponse>> {
    return findAllTransactionsByReciever(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTransactionsByReciever$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTransactionsByReciever(params?: FindAllTransactionsByReciever$Params, context?: HttpContext): Observable<PageResponseTransactionResponse> {
    return this.findAllTransactionsByReciever$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTransactionResponse>): PageResponseTransactionResponse => r.body)
    );
  }

}
