/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addAmount } from '../fn/wallet/add-amount';
import { AddAmount$Params } from '../fn/wallet/add-amount';
import { addOrUpdateWallet } from '../fn/wallet/add-or-update-wallet';
import { AddOrUpdateWallet$Params } from '../fn/wallet/add-or-update-wallet';
import { deleteWallet } from '../fn/wallet/delete-wallet';
import { DeleteWallet$Params } from '../fn/wallet/delete-wallet';
import { findAllWalletsByOwner } from '../fn/wallet/find-all-wallets-by-owner';
import { FindAllWalletsByOwner$Params } from '../fn/wallet/find-all-wallets-by-owner';
import { findWalletById } from '../fn/wallet/find-wallet-by-id';
import { FindWalletById$Params } from '../fn/wallet/find-wallet-by-id';
import { getTotalBalance } from '../fn/wallet/get-total-balance';
import { GetTotalBalance$Params } from '../fn/wallet/get-total-balance';
import { PageResponseWalletResponse } from '../models/page-response-wallet-response';
import { WalletResponse } from '../models/wallet-response';

@Injectable({ providedIn: 'root' })
export class WalletService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addOrUpdateWallet()` */
  static readonly AddOrUpdateWalletPath = '/wallet/add-wallet';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateWallet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateWallet$Response(params: AddOrUpdateWallet$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addOrUpdateWallet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateWallet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateWallet(params: AddOrUpdateWallet$Params, context?: HttpContext): Observable<number> {
    return this.addOrUpdateWallet$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addAmount()` */
  static readonly AddAmountPath = '/wallet/add-amount/{wallet-id}/{amount}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAmount()` instead.
   *
   * This method doesn't expect any request body.
   */
  addAmount$Response(params: AddAmount$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return addAmount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAmount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addAmount(params: AddAmount$Params, context?: HttpContext): Observable<{
}> {
    return this.addAmount$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findWalletById()` */
  static readonly FindWalletByIdPath = '/wallet/{wallet-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findWalletById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWalletById$Response(params: FindWalletById$Params, context?: HttpContext): Observable<StrictHttpResponse<WalletResponse>> {
    return findWalletById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findWalletById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findWalletById(params: FindWalletById$Params, context?: HttpContext): Observable<WalletResponse> {
    return this.findWalletById$Response(params, context).pipe(
      map((r: StrictHttpResponse<WalletResponse>): WalletResponse => r.body)
    );
  }

  /** Path part for operation `deleteWallet()` */
  static readonly DeleteWalletPath = '/wallet/{wallet-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteWallet()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWallet$Response(params: DeleteWallet$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteWallet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteWallet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteWallet(params: DeleteWallet$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteWallet$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getTotalBalance()` */
  static readonly GetTotalBalancePath = '/wallet/total-balance';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTotalBalance()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalBalance$Response(params?: GetTotalBalance$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return getTotalBalance(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTotalBalance$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTotalBalance(params?: GetTotalBalance$Params, context?: HttpContext): Observable<number> {
    return this.getTotalBalance$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllWalletsByOwner()` */
  static readonly FindAllWalletsByOwnerPath = '/wallet/all-wallets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllWalletsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllWalletsByOwner$Response(params?: FindAllWalletsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseWalletResponse>> {
    return findAllWalletsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllWalletsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllWalletsByOwner(params?: FindAllWalletsByOwner$Params, context?: HttpContext): Observable<PageResponseWalletResponse> {
    return this.findAllWalletsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseWalletResponse>): PageResponseWalletResponse => r.body)
    );
  }

}
