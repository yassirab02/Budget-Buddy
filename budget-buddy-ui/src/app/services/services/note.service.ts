/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNote } from '../fn/note/create-note';
import { CreateNote$Params } from '../fn/note/create-note';
import { deleteNote } from '../fn/note/delete-note';
import { DeleteNote$Params } from '../fn/note/delete-note';

@Injectable({ providedIn: 'root' })
export class NoteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createNote()` */
  static readonly CreateNotePath = '/note/add-note';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNote()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNote$Response(params: CreateNote$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createNote(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNote$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNote(params: CreateNote$Params, context?: HttpContext): Observable<number> {
    return this.createNote$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteNote()` */
  static readonly DeleteNotePath = '/note/{note-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteNote()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNote$Response(params: DeleteNote$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteNote(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteNote$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNote(params: DeleteNote$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteNote$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
