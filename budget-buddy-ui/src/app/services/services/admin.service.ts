/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateQuote } from '../fn/admin/add-or-update-quote';
import { AddOrUpdateQuote$Params } from '../fn/admin/add-or-update-quote';
import { ContactResponse } from '../models/contact-response';
import { deleteContactMessage } from '../fn/admin/delete-contact-message';
import { DeleteContactMessage$Params } from '../fn/admin/delete-contact-message';
import { deleteQuote } from '../fn/admin/delete-quote';
import { DeleteQuote$Params } from '../fn/admin/delete-quote';
import { findAllContactsMessages } from '../fn/admin/find-all-contacts-messages';
import { FindAllContactsMessages$Params } from '../fn/admin/find-all-contacts-messages';
import { findAllStories } from '../fn/admin/find-all-stories';
import { FindAllStories$Params } from '../fn/admin/find-all-stories';
import { PageResponseContactResponse } from '../models/page-response-contact-response';
import { PageResponseStoryResponse } from '../models/page-response-story-response';
import { updateContactMessage } from '../fn/admin/update-contact-message';
import { UpdateContactMessage$Params } from '../fn/admin/update-contact-message';
import { uploadQuotePhoto } from '../fn/admin/upload-quote-photo';
import { UploadQuotePhoto$Params } from '../fn/admin/upload-quote-photo';

@Injectable({ providedIn: 'root' })
export class AdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadQuotePhoto()` */
  static readonly UploadQuotePhotoPath = '/admin/photo/{quote-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadQuotePhoto()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadQuotePhoto$Response(params: UploadQuotePhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadQuotePhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadQuotePhoto$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadQuotePhoto(params: UploadQuotePhoto$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadQuotePhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateContactMessage()` */
  static readonly UpdateContactMessagePath = '/admin/contact/{contact-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContactMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateContactMessage$Response(params: UpdateContactMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<ContactResponse>> {
    return updateContactMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContactMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateContactMessage(params: UpdateContactMessage$Params, context?: HttpContext): Observable<ContactResponse> {
    return this.updateContactMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<ContactResponse>): ContactResponse => r.body)
    );
  }

  /** Path part for operation `deleteContactMessage()` */
  static readonly DeleteContactMessagePath = '/admin/contact/{contact-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteContactMessage()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContactMessage$Response(params: DeleteContactMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deleteContactMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteContactMessage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteContactMessage(params: DeleteContactMessage$Params, context?: HttpContext): Observable<number> {
    return this.deleteContactMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addOrUpdateQuote()` */
  static readonly AddOrUpdateQuotePath = '/admin/add-quote';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateQuote()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateQuote$Response(params: AddOrUpdateQuote$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addOrUpdateQuote(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateQuote$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateQuote(params: AddOrUpdateQuote$Params, context?: HttpContext): Observable<number> {
    return this.addOrUpdateQuote$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllStories()` */
  static readonly FindAllStoriesPath = '/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllStories()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStories$Response(params?: FindAllStories$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseStoryResponse>> {
    return findAllStories(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllStories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllStories(params?: FindAllStories$Params, context?: HttpContext): Observable<PageResponseStoryResponse> {
    return this.findAllStories$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseStoryResponse>): PageResponseStoryResponse => r.body)
    );
  }

  /** Path part for operation `findAllContactsMessages()` */
  static readonly FindAllContactsMessagesPath = '/admin/all-contact';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllContactsMessages()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllContactsMessages$Response(params?: FindAllContactsMessages$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseContactResponse>> {
    return findAllContactsMessages(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllContactsMessages$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllContactsMessages(params?: FindAllContactsMessages$Params, context?: HttpContext): Observable<PageResponseContactResponse> {
    return this.findAllContactsMessages$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseContactResponse>): PageResponseContactResponse => r.body)
    );
  }

  /** Path part for operation `deleteQuote()` */
  static readonly DeleteQuotePath = '/admin/{quote-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteQuote()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuote$Response(params: DeleteQuote$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteQuote(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteQuote$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuote(params: DeleteQuote$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteQuote$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
