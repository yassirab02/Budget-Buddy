/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOrUpdateComment } from '../fn/comment/add-or-update-comment';
import { AddOrUpdateComment$Params } from '../fn/comment/add-or-update-comment';
import { CommentResponse } from '../models/comment-response';
import { deleteComment } from '../fn/comment/delete-comment';
import { DeleteComment$Params } from '../fn/comment/delete-comment';
import { findAllCommentsByStory } from '../fn/comment/find-all-comments-by-story';
import { FindAllCommentsByStory$Params } from '../fn/comment/find-all-comments-by-story';
import { PageResponseCommentResponse } from '../models/page-response-comment-response';
import { toggle1 } from '../fn/comment/toggle-1';
import { Toggle1$Params } from '../fn/comment/toggle-1';

@Injectable({ providedIn: 'root' })
export class CommentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `toggle1()` */
  static readonly Toggle1Path = '/comment/toggle/{comment-id}/reaction/{reactionType}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `toggle1()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggle1$Response(params: Toggle1$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponse>> {
    return toggle1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `toggle1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  toggle1(params: Toggle1$Params, context?: HttpContext): Observable<CommentResponse> {
    return this.toggle1$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponse>): CommentResponse => r.body)
    );
  }

  /** Path part for operation `addOrUpdateComment()` */
  static readonly AddOrUpdateCommentPath = '/comment/add-comment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOrUpdateComment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateComment$Response(params: AddOrUpdateComment$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponse>> {
    return addOrUpdateComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOrUpdateComment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOrUpdateComment(params: AddOrUpdateComment$Params, context?: HttpContext): Observable<CommentResponse> {
    return this.addOrUpdateComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponse>): CommentResponse => r.body)
    );
  }

  /** Path part for operation `findAllCommentsByStory()` */
  static readonly FindAllCommentsByStoryPath = '/comment/story/{story-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCommentsByStory()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentsByStory$Response(params: FindAllCommentsByStory$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCommentResponse>> {
    return findAllCommentsByStory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCommentsByStory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCommentsByStory(params: FindAllCommentsByStory$Params, context?: HttpContext): Observable<PageResponseCommentResponse> {
    return this.findAllCommentsByStory$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCommentResponse>): PageResponseCommentResponse => r.body)
    );
  }

  /** Path part for operation `deleteComment()` */
  static readonly DeleteCommentPath = '/comment/{comment-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment$Response(params: DeleteComment$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment(params: DeleteComment$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
