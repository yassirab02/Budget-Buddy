/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ExpensesCategoryResponse } from '../models/expenses-category-response';
import { getExpensesCategory } from '../fn/category/get-expenses-category';
import { GetExpensesCategory$Params } from '../fn/category/get-expenses-category';
import { getIncomeSources } from '../fn/category/get-income-sources';
import { GetIncomeSources$Params } from '../fn/category/get-income-sources';
import { IncomeSourceResponse } from '../models/income-source-response';

@Injectable({ providedIn: 'root' })
export class CategoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getIncomeSources()` */
  static readonly GetIncomeSourcesPath = '/category/income-source';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getIncomeSources()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIncomeSources$Response(params?: GetIncomeSources$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeSourceResponse>>> {
    return getIncomeSources(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getIncomeSources$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIncomeSources(params?: GetIncomeSources$Params, context?: HttpContext): Observable<Array<IncomeSourceResponse>> {
    return this.getIncomeSources$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeSourceResponse>>): Array<IncomeSourceResponse> => r.body)
    );
  }

  /** Path part for operation `getExpensesCategory()` */
  static readonly GetExpensesCategoryPath = '/category/expenses-category';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getExpensesCategory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpensesCategory$Response(params?: GetExpensesCategory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExpensesCategoryResponse>>> {
    return getExpensesCategory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getExpensesCategory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpensesCategory(params?: GetExpensesCategory$Params, context?: HttpContext): Observable<Array<ExpensesCategoryResponse>> {
    return this.getExpensesCategory$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExpensesCategoryResponse>>): Array<ExpensesCategoryResponse> => r.body)
    );
  }

}
