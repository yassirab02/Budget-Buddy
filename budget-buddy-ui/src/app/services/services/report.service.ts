/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllMonthlyReports } from '../fn/report/get-all-monthly-reports';
import { GetAllMonthlyReports$Params } from '../fn/report/get-all-monthly-reports';
import { getAllReports } from '../fn/report/get-all-reports';
import { GetAllReports$Params } from '../fn/report/get-all-reports';
import { getAllYearlyReports } from '../fn/report/get-all-yearly-reports';
import { GetAllYearlyReports$Params } from '../fn/report/get-all-yearly-reports';
import { getMonthlyReports } from '../fn/report/get-monthly-reports';
import { GetMonthlyReports$Params } from '../fn/report/get-monthly-reports';
import { getReportById } from '../fn/report/get-report-by-id';
import { GetReportById$Params } from '../fn/report/get-report-by-id';
import { getReportsByYear } from '../fn/report/get-reports-by-year';
import { GetReportsByYear$Params } from '../fn/report/get-reports-by-year';
import { getYearlyReports } from '../fn/report/get-yearly-reports';
import { GetYearlyReports$Params } from '../fn/report/get-yearly-reports';
import { PageResponseReportResponse } from '../models/page-response-report-response';
import { ReportResponse } from '../models/report-response';

@Injectable({ providedIn: 'root' })
export class ReportService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getYearlyReports()` */
  static readonly GetYearlyReportsPath = '/report/yearly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getYearlyReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getYearlyReports$Response(params?: GetYearlyReports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReportResponse>>> {
    return getYearlyReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getYearlyReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getYearlyReports(params?: GetYearlyReports$Params, context?: HttpContext): Observable<Array<ReportResponse>> {
    return this.getYearlyReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReportResponse>>): Array<ReportResponse> => r.body)
    );
  }

  /** Path part for operation `getReportsByYear()` */
  static readonly GetReportsByYearPath = '/report/reports/{report-year}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportsByYear()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByYear$Response(params: GetReportsByYear$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReportResponse>>> {
    return getReportsByYear(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportsByYear$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportsByYear(params: GetReportsByYear$Params, context?: HttpContext): Observable<Array<ReportResponse>> {
    return this.getReportsByYear$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReportResponse>>): Array<ReportResponse> => r.body)
    );
  }

  /** Path part for operation `getReportById()` */
  static readonly GetReportByIdPath = '/report/report/{report-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReportById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportById$Response(params: GetReportById$Params, context?: HttpContext): Observable<StrictHttpResponse<ReportResponse>> {
    return getReportById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReportById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReportById(params: GetReportById$Params, context?: HttpContext): Observable<ReportResponse> {
    return this.getReportById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReportResponse>): ReportResponse => r.body)
    );
  }

  /** Path part for operation `getMonthlyReports()` */
  static readonly GetMonthlyReportsPath = '/report/monthly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMonthlyReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMonthlyReports$Response(params?: GetMonthlyReports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReportResponse>>> {
    return getMonthlyReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMonthlyReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMonthlyReports(params?: GetMonthlyReports$Params, context?: HttpContext): Observable<Array<ReportResponse>> {
    return this.getMonthlyReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReportResponse>>): Array<ReportResponse> => r.body)
    );
  }

  /** Path part for operation `getAllYearlyReports()` */
  static readonly GetAllYearlyReportsPath = '/report/all-yearly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllYearlyReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllYearlyReports$Response(params?: GetAllYearlyReports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReportResponse>>> {
    return getAllYearlyReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllYearlyReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllYearlyReports(params?: GetAllYearlyReports$Params, context?: HttpContext): Observable<Array<ReportResponse>> {
    return this.getAllYearlyReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReportResponse>>): Array<ReportResponse> => r.body)
    );
  }

  /** Path part for operation `getAllReports()` */
  static readonly GetAllReportsPath = '/report/all-reports';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReports$Response(params?: GetAllReports$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReportResponse>> {
    return getAllReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReports(params?: GetAllReports$Params, context?: HttpContext): Observable<PageResponseReportResponse> {
    return this.getAllReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReportResponse>): PageResponseReportResponse => r.body)
    );
  }

  /** Path part for operation `getAllMonthlyReports()` */
  static readonly GetAllMonthlyReportsPath = '/report/all-monthly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMonthlyReports()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMonthlyReports$Response(params?: GetAllMonthlyReports$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReportResponse>>> {
    return getAllMonthlyReports(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMonthlyReports$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMonthlyReports(params?: GetAllMonthlyReports$Params, context?: HttpContext): Observable<Array<ReportResponse>> {
    return this.getAllMonthlyReports$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReportResponse>>): Array<ReportResponse> => r.body)
    );
  }

}
